<?php

declare(strict_types=1);

/**
 * @psalm-immutable
 */
class GetUsers
{
    /**
     * @psalm-var non-empty-list<string>
     */
    private array $userIds;
    //—É–¥–∞–ª–∏–ª —Å–µ—Ç—Ç–µ—Ä –∏ –ø–µ—Ä–µ–Ω–µ—Å $userIds  –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä,–¥–∞–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞–ª–∞—Å—å –∏–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å 
    public function __construct(array $userIds)
    {
        if (empty($userIds)) {
            throw new InvalidArgumentException('User IDs cannot be empty.');
        }

        $this->userIds = $userIds;
    }

    /**
     * @psalm-return non-empty-list<string>
     */
    public function getUserIds(): array
    {
        return $this->userIds;
    }
}
//–î–æ–±–∞–≤–∏–ª –∏–Ω–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ –∏ –ø–æ SOLID'—É üòÉ
interface DatabaseTransactionInterface
{
    public function beginTransaction(string $isolationLevel): void;
    public function commit(): void;
    public function rollback(): void;
}

interface DatabaseQueryInterface
{
    public function prepare(string $query): PDOStatement;
}

interface DatabaseInterface extends DatabaseTransactionInterface, DatabaseQueryInterface
{
}

final class GetUsersHandler
{
    protected DatabaseInterface $database;
    
    public function __construct(DatabaseInterface $database)
    {
        $this->database = $database;
    }

    /**
     * @psalm-return Generator<array{string, string}>
     */
    final public function __invoke(GetUsers $query): Generator
    {
        //—Ä–µ—Ñ–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è , –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é 
        yield from $this->transactionally(
            function () use ($query): Generator {
                yield from $this->fetchUsers($query);
            }
        );
    }

    private function fetchUsers(GetUsers $query): Generator
    {
        $ids = implode(', ', array_fill(0, count($query->getUserIds()), '?'));
        $statement = $this->database->prepare('SELECT id, firstname FROM users WHERE id IN (' . $ids . ')');
        $statement->execute($query->getUserIds());
        while ($row = $statement->fetch(PDO::FETCH_ASSOC)) {
            yield $row;
        }
    }

    /**
     * @psalm-param callable(): Generator $operation
     */
    private function transactionally(callable $operation): Generator
    {
        $this->database->beginTransaction('SERIALIZABLE');
        //–ü–µ—Ä–µ–Ω–µ—Å –∫–æ–º–º–∏—Ç , –≤ —Ç—Ä–∞–π , –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 
        try {
            $result = $operation();
            $this->database->commit();
        } catch (Throwable $exception) {
            $this->database->rollback();
            throw $exception; // –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞
        }

        return $result;
    }
}
